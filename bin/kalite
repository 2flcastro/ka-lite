#!/usr/bin/env python
"""
Role of this executable:
Determine where kalite is installed and which python to use. This can be
set in the system's env (useful for distribution).

All arguments are proxied for kalite, and all stderr and stdout is returned.

Notes...
THIS MAY BE RUN BY PYTHON 2 AND 3 !!!

Q&A
Q: Why is this not written in Bash?
A: Because Bash isn't cross-platform

NB! This is run using the host system's python!

"""
import os
import sys
import subprocess
from distutils import spawn

kalite_path = None

# Yay! The path is set!
if 'KALITE_DIR' in os.environ:
    kalite_path = os.environ['KALITE_DIR']
    if os.path.exists(kalite_path):
        raise RuntimeError("KALITE_DIR environment var not set, check your installation.")

# Path not set, try to guess it
else:
    where_am_i = os.path.split(__file__)
    if len(where_am_i) > 2:
        where_am_i_prev = os.path.join(*where_am_i[:-2])
    else:
        where_am_i_prev = '.'
    if os.path.exists(os.path.join(where_am_i_prev, 'kalite', '__init__.py')):
        kalite_path = where_am_i_prev

if not kalite_path:
    raise RuntimeError("Could not determine where KA Lite is installed. Please set the KALITE_DIR environment variable.")


# Make sure it's set as an absolute path
kalite_path = os.path.abspath(kalite_path)

sys.path.append(os.path.join(kalite_path, 'python-packages'))
sys.path.append(os.path.join(kalite_path))

env = {}
env.update(os.environ.copy())
env['KALITE_DIR'] = kalite_path

if 'KALITE_PYTHON' in os.environ:
    python_executable = os.environ['KALITE_PYTHON']
else:
    # Not sure if this is a nice behavior.. but we check if there is an explicit
    # python2 executable because some systems may have 'python' set for py3.
    python_executable = 'python2'
    if not spawn.find_executable(python_executable):
        python_executable = 'python'

# Finally get the full path for the executable from distutils
python_executable = spawn.find_executable(python_executable)

# Check that the executable exists
if not python_executable:
    raise RuntimeError("Cannot find python executable to run or its not executable")

# Path for manage.py
manage_py = os.path.join(kalite_path, 'kalitectl.py')

# Arguments to proxy
args = sys.argv[1:]

# Open up a process and proxy both the process' stdout and stderr
p = subprocess.Popen(
    [python_executable, manage_py] + args,
    env=env,
)

p.communicate()